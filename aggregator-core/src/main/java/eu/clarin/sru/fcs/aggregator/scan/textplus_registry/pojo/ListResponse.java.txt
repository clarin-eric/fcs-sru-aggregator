package eu.clarin.sru.fcs.aggregator.scan.textplus_registry.pojo;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ListResponse<T> implements List<T> {

    int status;
    String action;
    int size;

    List<T> items;

    @JsonProperty("_links")
    Map<String, String> links;

    public int getStatus() {
        return status;
    }

    public String getAction() {
        return action;
    }

    public int getSize() {
        return size;
    }

    public List<T> getItems() {
        return items;
    }

    public Map<String, String> getLinks() {
        return links;
    }

    @Override
    public boolean contains(Object o) {
        return items.contains(o);
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        return items.containsAll(c);
    }

    @Override
    public T get(int index) {
        return items.get(index);
    }

    @Override
    public int indexOf(Object o) {
        return items.indexOf(o);
    }

    @Override
    public boolean isEmpty() {
        return items.isEmpty();
    }

    @Override
    public Iterator<T> iterator() {
        return items.iterator();
    }

    @Override
    public int lastIndexOf(Object o) {
        return items.lastIndexOf(o);
    }

    @Override
    public ListIterator<T> listIterator() {
        return items.listIterator();
    }

    @Override
    public ListIterator<T> listIterator(int index) {
        return items.listIterator(index);
    }

    @Override
    public int size() {
        return items.size();
    }

    @Override
    public List<T> subList(int arg0, int arg1) {
        return items.subList(arg0, arg1);
    }

    @Override
    public Object[] toArray() {
        return items.toArray();
    }

    @Override
    public <T> T[] toArray(T[] a) {
        return items.toArray(a);
    }

    @Override
    public boolean add(T e) {
        throw new UnsupportedOperationException("Unsupported method 'add'");
    }

    @Override
    public void add(int arg0, T arg1) {
        throw new UnsupportedOperationException("Unsupported method 'add'");
    }

    @Override
    public boolean addAll(Collection<? extends T> c) {
        throw new UnsupportedOperationException("Unsupported method 'addAll'");
    }

    @Override
    public boolean addAll(int arg0, Collection<? extends T> arg1) {
        throw new UnsupportedOperationException("Unsupported method 'addAll'");
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException("Unsupported method 'clear'");
    }

    @Override
    public boolean remove(Object o) {
        throw new UnsupportedOperationException("Unsupported method 'remove'");
    }

    @Override
    public T remove(int index) {
        throw new UnsupportedOperationException("Unsupported method 'remove'");
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        throw new UnsupportedOperationException("Unsupported method 'removeAll'");
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        throw new UnsupportedOperationException("Unsupported method 'retainAll'");
    }

    @Override
    public T set(int arg0, T arg1) {
        throw new UnsupportedOperationException("Unsupported method 'set'");
    }

}
